# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__


class BamlAsyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        tags: typing.Optional[typing.Dict[str, str]] = None,
        on_tick: typing.Optional[typing.Callable[[str, baml_py.baml_py.FunctionLog], None]] = None,
    ) -> "BamlAsyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        if tags is not None:
            options["tags"] = tags
        if on_tick is not None:
            options["on_tick"] = on_tick
        return BamlAsyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    async def ExtractAddressCandidates(self, search_results: str,place_name: str,story_context: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List["types.AddressCandidate"]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.ExtractAddressCandidates(search_results=search_results,place_name=place_name,story_context=story_context,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="ExtractAddressCandidates", args={
                "search_results": search_results,"place_name": place_name,"story_context": story_context,
            })
            return typing.cast(typing.List["types.AddressCandidate"], result.cast_to(types, types, stream_types, False, __runtime__))
    async def ExtractStories(self, chapter_text: str,book_context: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List["types.Story"]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.ExtractStories(chapter_text=chapter_text,book_context=book_context,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="ExtractStories", args={
                "chapter_text": chapter_text,"book_context": book_context,
            })
            return typing.cast(typing.List["types.Story"], result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateSearchQuery(self, place_name: str,place_type: typing.Optional[str],note: typing.Optional[str],story_title: str,story_summary: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SearchQuery:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.GenerateSearchQuery(place_name=place_name,place_type=place_type,note=note,story_title=story_title,story_summary=story_summary,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateSearchQuery", args={
                "place_name": place_name,"place_type": place_type,"note": note,"story_title": story_title,"story_summary": story_summary,
            })
            return typing.cast(types.SearchQuery, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ScoreAndValidate(self, candidates: typing.List["types.AddressCandidate"],place_name: str,original_coords: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.ScoredCandidate:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.ScoreAndValidate(candidates=candidates,place_name=place_name,original_coords=original_coords,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="ScoreAndValidate", args={
                "candidates": candidates,"place_name": place_name,"original_coords": original_coords,
            })
            return typing.cast(types.ScoredCandidate, result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def ExtractAddressCandidates(self, search_results: str,place_name: str,story_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List["stream_types.AddressCandidate"], typing.List["types.AddressCandidate"]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ExtractAddressCandidates", args={
            "search_results": search_results,"place_name": place_name,"story_context": story_context,
        })
        return baml_py.BamlStream[typing.List["stream_types.AddressCandidate"], typing.List["types.AddressCandidate"]](
          result,
          lambda x: typing.cast(typing.List["stream_types.AddressCandidate"], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List["types.AddressCandidate"], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ExtractStories(self, chapter_text: str,book_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List["stream_types.Story"], typing.List["types.Story"]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ExtractStories", args={
            "chapter_text": chapter_text,"book_context": book_context,
        })
        return baml_py.BamlStream[typing.List["stream_types.Story"], typing.List["types.Story"]](
          result,
          lambda x: typing.cast(typing.List["stream_types.Story"], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List["types.Story"], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateSearchQuery(self, place_name: str,place_type: typing.Optional[str],note: typing.Optional[str],story_title: str,story_summary: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SearchQuery, types.SearchQuery]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateSearchQuery", args={
            "place_name": place_name,"place_type": place_type,"note": note,"story_title": story_title,"story_summary": story_summary,
        })
        return baml_py.BamlStream[stream_types.SearchQuery, types.SearchQuery](
          result,
          lambda x: typing.cast(stream_types.SearchQuery, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SearchQuery, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ScoreAndValidate(self, candidates: typing.List["types.AddressCandidate"],place_name: str,original_coords: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ScoredCandidate, types.ScoredCandidate]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ScoreAndValidate", args={
            "candidates": candidates,"place_name": place_name,"original_coords": original_coords,
        })
        return baml_py.BamlStream[stream_types.ScoredCandidate, types.ScoredCandidate](
          result,
          lambda x: typing.cast(stream_types.ScoredCandidate, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ScoredCandidate, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def ExtractAddressCandidates(self, search_results: str,place_name: str,story_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExtractAddressCandidates", args={
            "search_results": search_results,"place_name": place_name,"story_context": story_context,
        }, mode="request")
        return result
    async def ExtractStories(self, chapter_text: str,book_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExtractStories", args={
            "chapter_text": chapter_text,"book_context": book_context,
        }, mode="request")
        return result
    async def GenerateSearchQuery(self, place_name: str,place_type: typing.Optional[str],note: typing.Optional[str],story_title: str,story_summary: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateSearchQuery", args={
            "place_name": place_name,"place_type": place_type,"note": note,"story_title": story_title,"story_summary": story_summary,
        }, mode="request")
        return result
    async def ScoreAndValidate(self, candidates: typing.List["types.AddressCandidate"],place_name: str,original_coords: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ScoreAndValidate", args={
            "candidates": candidates,"place_name": place_name,"original_coords": original_coords,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def ExtractAddressCandidates(self, search_results: str,place_name: str,story_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExtractAddressCandidates", args={
            "search_results": search_results,"place_name": place_name,"story_context": story_context,
        }, mode="stream")
        return result
    async def ExtractStories(self, chapter_text: str,book_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExtractStories", args={
            "chapter_text": chapter_text,"book_context": book_context,
        }, mode="stream")
        return result
    async def GenerateSearchQuery(self, place_name: str,place_type: typing.Optional[str],note: typing.Optional[str],story_title: str,story_summary: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateSearchQuery", args={
            "place_name": place_name,"place_type": place_type,"note": note,"story_title": story_title,"story_summary": story_summary,
        }, mode="stream")
        return result
    async def ScoreAndValidate(self, candidates: typing.List["types.AddressCandidate"],place_name: str,original_coords: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ScoreAndValidate", args={
            "candidates": candidates,"place_name": place_name,"original_coords": original_coords,
        }, mode="stream")
        return result
    

b = BamlAsyncClient(DoNotUseDirectlyCallManager({}))