# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "geocode.baml": "// BAML functions for precision geocoding\n// Used by abxgeo to resolve vague locations to precise addresses\n\nclass LocationClassification {\n  category string @description(\"One of: 'skip', 'simple', 'research'\")\n  reason string @description(\"Why this category was chosen\")\n  simple_address string? @description(\"If category is 'simple', provide the well-known address (e.g., '1 Infinite Loop, Cupertino, CA')\")\n  estimated_precision string? @description(\"If category is 'simple', estimated precision: 'address', 'city', etc.\")\n}\n\nclass AddressResolution {\n  address string @description(\"Full street address if found, otherwise most specific location found\")\n  lat float? @description(\"Latitude coordinate\")\n  lon float? @description(\"Longitude coordinate\")\n  precision string @description(\"One of: 'address', 'street', 'intersection', 'city', 'region', 'country'\")\n  source_url string @description(\"URL where this information was found\")\n  source_snippet string @description(\"Exact text snippet from source that contains the address/location info\")\n  confidence float @description(\"Confidence score 0.0-1.0 based on source reliability and specificity\")\n  is_residence bool @description(\"True if this is a private residence\")\n  corroboration string[] @description(\"List of corroborating evidence from other sources\")\n  concerns string[] @description(\"Any red flags or uncertainty factors\")\n  reasoning string @description(\"Brief explanation of how address was found and confidence score\")\n}\n\nfunction FindPreciseAddress(\n  place_name: string,\n  place_type: string?,\n  note: string?,\n  story_title: string,\n  story_summary: string,\n  original_lat: float?,\n  original_lon: float?\n) -> AddressResolution {\n  client GeocodeModel\n  prompt #\"\n    You are a geocoding expert tasked with finding the precise street address for a location.\n\n    IMPORTANT: You have access to web search. USE IT to find authoritative sources with precise addresses.\n    Search multiple sources if needed to corroborate information.\n\n    LOCATION TO FIND:\n    Place Name: {{ place_name }}\n    Place Type: {{ place_type or \"unknown\" }}\n    Context Note: {{ note or \"none\" }}\n    Original Coordinates: {% if original_lat and original_lon %}{{ original_lat }}, {{ original_lon }}{% else %}none{% endif %}\n\n    STORY CONTEXT:\n    Title: {{ story_title }}\n    Summary: {{ story_summary }}\n\n    TASK:\n    Use web search to find the precise street address and coordinates for this location.\n\n    IMPORTANT - HANDLING VAGUE LOCATIONS:\n    - If the location is too vague (e.g., \"United States\", \"California\", \"Asia\") WITHOUT sufficient context to identify a specific building/address, DO NOT try to force a street address\n    - For vague country/region references, return just the country/region name with low confidence (0.1-0.3)\n    - Set precision to \"country\" or \"region\" accordingly\n    - In the \"concerns\" field, note: \"Location too vague - insufficient context for specific address\"\n    - ONLY search for specific addresses if there are clear clues (company name, factory, headquarters, landmark, event, etc.)\n\n    SEARCH STRATEGY (only if location is specific enough):\n    1. For factories: search \"company name + factory + city + address\"\n    2. For headquarters: search \"company name + headquarters + city + year + address\"\n    3. For residences: be respectful of privacy, focus on historical/public records\n    4. For landmarks: search \"landmark name + city + address\"\n    5. Include time period context if mentioned (e.g., \"1980s\", \"1984\")\n    6. For vague references: accept the vagueness, don't force a search\n\n    EXTRACTION RULES:\n    1. Look for complete street addresses (number, street, city, state, zip)\n    2. If no street address, look for coordinates (lat/lon)\n    3. If no coordinates, extract the most specific location mentioned\n    4. Determine precision level: address > street > intersection > city > region > country\n    5. Extract exact source URL and text snippet containing the address (use \"N/A\" if too vague to search)\n    6. Assign confidence based on:\n       - Source reliability: .gov/.edu (0.9-1.0), Wikipedia (0.7-0.8), news (0.6-0.8), forums (0.3-0.5)\n       - Specificity: exact address (1.0), intersection (0.7), city only (0.3), region (0.1-0.2), country (0.1)\n       - Corroboration: multiple sources increase confidence (+0.1 if 2+ sources agree)\n    7. Flag if location is a private residence (is_residence = true)\n    8. Cross-check coordinates if original coords were provided (should be nearby, within ~1km)\n    9. List corroborating evidence and any concerns\n\n    EXAMPLES:\n    ✓ \"702 Bandley Drive, Fountain, Colorado 80817\" → precision: address, confidence: 0.95\n    ✓ \"Corner of Bandley Dr and Main St\" → precision: intersection, confidence: 0.7\n    ✓ \"Somewhere in Fountain, Colorado\" → precision: city, confidence: 0.3\n    ✓ \"United States\" (vague context) → precision: country, confidence: 0.1, concerns: [\"Location too vague - insufficient context\"]\n    ✗ Don't force \"United States\" → \"1600 Pennsylvania Ave\" without specific context mentioning White House\n\n    Return a JSON object with the AddressResolution structure:\n    {\n      \"address\": \"full street address or country/region name if too vague\",\n      \"lat\": 37.123 or null,\n      \"lon\": -122.456 or null,\n      \"precision\": \"address|street|intersection|city|region|country\",\n      \"source_url\": \"http://... or 'N/A' if too vague to search\",\n      \"source_snippet\": \"exact text from source or 'N/A' if too vague\",\n      \"confidence\": 0.1 to 1.0,\n      \"is_residence\": false,\n      \"corroboration\": [\"evidence 1\", \"evidence 2\"] or [] if too vague,\n      \"concerns\": [\"Location too vague - insufficient context\"] or other concerns,\n      \"reasoning\": \"explanation of how address was found and confidence score, or why location is too vague\"\n    }\n  \"#\n}\n\n\nfunction ClassifyLocation(\n  place_name: string,\n  place_type: string?,\n  note: string?,\n  story_title: string,\n  story_summary: string\n) -> LocationClassification {\n  client GPT5Mini\n  prompt #\"\n    You are a location classifier for a geocoding system. Categorize this location into one of three tiers to optimize processing.\n\n    LOCATION:\n    Place Name: {{ place_name }}\n    Place Type: {{ place_type or \"unknown\" }}\n    Context Note: {{ note or \"none\" }}\n\n    STORY CONTEXT:\n    Title: {{ story_title }}\n    Summary: {{ story_summary }}\n\n    CATEGORIZATION RULES:\n\n    1. SKIP - Vague country/region with NO specific clues:\n       - Generic country references: \"China\", \"Japan\", \"Taiwan\" WITHOUT company name or city\n       - Notes like \"supplier region\", \"generic reference\", \"country not specified\"\n       - Large regions: \"Asia\", \"Europe\", \"Middle East\" WITHOUT company/factory context\n       → Return category: \"skip\", reason: why it's too vague\n\n    2. SIMPLE - Well-known landmarks, capitals, or company headquarters:\n       - Famous places: \"Beijing\" (capital), \"Tokyo\" (capital), \"White House\"\n       - Company HQs with context: \"Cupertino, California\" + Apple → \"1 Infinite Loop, Cupertino, CA 95014\"\n       - Major landmarks: \"Eiffel Tower\", \"Golden Gate Bridge\"\n       → Return category: \"simple\", simple_address: the well-known address, estimated_precision: address/city\n\n    3. RESEARCH - Specific or inferable locations needing web search:\n       - Explicit location: \"Fountain, Colorado factory\", \"Fremont plant\", \"Changsha facility\"\n       - Company-inferred location: \"Quanta factory\" (Quanta is Taiwanese → search Taiwan factories)\n       - Context clues: Story mentions country/region/year that narrows down location\n       - Historical sites requiring research\n       - IMPORTANT: If place_name contains a company name (Foxconn, Quanta, Pegatron, etc.):\n         * Check story context for country/region mentions\n         * Use company's known primary locations (e.g., Quanta = Taiwan, Foxconn = China/Taiwan)\n         * If ANY context clue exists (year, country in story, company origin) → RESEARCH\n       → Return category: \"research\", reason: what needs to be researched and what clues exist\n\n    EXAMPLES:\n\n    ✓ \"China\" + type: country + note: \"Supplier region for multi-touch\" + story: generic supply chain\n      → skip (vague country, no specific facility, no company name)\n\n    ✓ \"Cupertino, California\" + story about Apple + note: \"Apple's home base\"\n      → simple (1 Infinite Loop, Cupertino, CA 95014)\n\n    ✓ \"Beijing\" + type: city + note: \"Policy document location\"\n      → simple (Beijing, China - capital city)\n\n    ✓ \"Fountain, Colorado\" + type: factory + note: \"Apple Macintosh factory, 340,000 sq ft\"\n      → research (specific factory needs address lookup)\n\n    ✓ \"Japan\" + type: country + note: \"Canon manufactured LaserWriter\"\n      → skip (country-level, no specific Canon factory mentioned, no year/city context)\n\n    ✓ \"Quanta factory\" + type: factory + note: \"(location not specified)\" + story: mentions Taiwan supplier, 2010\n      → research (Quanta is Taiwanese company, story has Taiwan context + year → search \"Quanta factory Taiwan 2010\")\n\n    ✓ \"Foxconn facility\" + type: factory + note: \"iPhone production\" + story: supply chain in China\n      → research (Foxconn has China/Taiwan factories, story context mentions China → search specific facility)\n\n    ✓ \"Tokyo, Japan\" + note: \"dinner with Sony executives at exclusive restaurant\"\n      → simple (Tokyo, Japan - major city with known coordinates)\n\n    Return JSON with: category, reason, and optionally simple_address + estimated_precision.\n  \"#\n}\n\n\n// GeocodeModel client for geocoding (uses gpt-5 with web search)\nclient<llm> GeocodeModel {\n  provider openai-responses\n  options {\n    model \"gpt-5\"\n    reasoning {\n      effort \"medium\"\n    }\n    tools [\n      {\n        type \"web_search_preview\"\n      }\n    ]\n  }\n}\n\n// GPT5Mini client for fast classification (cheap, no web search)\nclient<llm> GPT5Mini {\n  provider openai-responses\n  options {\n    model \"gpt-5-mini\"\n  }\n}\n",
    "main.baml": "// BAML configuration for story extraction\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o-2024-08-06\"\n    api_key env.OPENAI_API_KEY\n    temperature 0\n  }\n}\n\nclient<llm> GPT4oMini {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n    temperature 0\n  }\n}\n\n// Auto-resolve to best available model (GPT-5)\nclient<llm> AutoModel {\n  provider openai\n  options {\n    model \"gpt-5\"\n    api_key env.OPENAI_API_KEY\n    reasoning_effort \"medium\"\n  }\n}\n\nclass DateInfo {\n  asserted_text string? @description(\"Original date text from chapter\")\n  parsed string? @description(\"Parsed date in EDTF-ish format, e.g., '1984-03~'\")\n  precision string? @description(\"Precision: year, month, day, quarter, decade\")\n}\n\nclass Location {\n  place_name string @description(\"Name of the place\")\n  lat float? @description(\"Latitude\")\n  lon float? @description(\"Longitude\")\n  place_type string? @description(\"Type of place: office, lab, factory, etc.\")\n  geo_precision string? @description(\"building, campus, city, region\")\n  visitability string? @description(\"public, private, historical\")\n  note string? @description(\"Additional context\")\n}\n\nclass Person {\n  name string @description(\"Person's name\")\n  role_at_time string? @description(\"Role at the time of the story\")\n  team string? @description(\"Team or department\")\n  affiliation string? @description(\"Company or organization\")\n}\n\nclass Product {\n  product_line string? @description(\"Product line\")\n  model string? @description(\"Model name or number\")\n  codename string? @description(\"Internal codename\")\n  generation string? @description(\"Generation or version\")\n  design_language string? @description(\"Design language or style\")\n}\n\nclass Company {\n  name string @description(\"Company name\")\n  relationship string? @description(\"Relationship to the story: beneficiary, competitor, partner, etc.\")\n}\n\nclass Provenance {\n  source_type string @description(\"Type of source: book, interview, memo, etc.\")\n  citation string? @description(\"Citation text\")\n  isbn string? @description(\"ISBN if book source\")\n  author string? @description(\"Author of source\")\n  pub_year int? @description(\"Publication year\")\n  quote_snippet string? @description(\"Direct quote from source\")\n}\n\nclass Relationships {\n  contradicts string[]? @description(\"Story IDs this contradicts\")\n  references string[]? @description(\"Story IDs this references\")\n  precedes string[]? @description(\"Story IDs this precedes\")\n}\n\nclass Media {\n  asset_type string @description(\"Type: photo, video, document, etc.\")\n  uri string? @description(\"URI to the asset\")\n  credit string? @description(\"Credit/attribution\")\n  license string? @description(\"License type\")\n  date string? @description(\"Date of asset\")\n}\n\nclass Story {\n  story_id string @description(\"Use 'auto_or_uuid' to auto-generate\")\n  title string @description(\"Short descriptive title\")\n  summary string @description(\"2-3 sentence neutral summary\")\n  dates DateInfo? @description(\"Date information\")\n  locations Location[]? @description(\"Locations mentioned in the story\")\n  forward_locale Location? @description(\"Forward-looking location where impact occurred\")\n  people Person[]? @description(\"People involved\")\n  products Product[]? @description(\"Products mentioned\")\n  companies Company[]? @description(\"Companies involved\")\n  event_type string[]? @description(\"Event types: DesignDecision, Prototype, ProductLaunch, etc.\")\n  themes string[]? @description(\"Themes: innovation, conflict, partnership, etc.\")\n  tone string[]? @description(\"Tone: triumphant, tense, nostalgic, etc.\")\n  business_phase string? @description(\"Business phase or era\")\n  era string? @description(\"Era description\")\n  relationships Relationships? @description(\"Relationships to other stories\")\n  provenance Provenance[]? @description(\"Source citations\")\n  confidence float @description(\"Confidence score 0-1\")\n  freeform_tags string[]? @description(\"Freeform tags\")\n  media Media[]? @description(\"Media assets\")\n}\n\nfunction ExtractStories(chapter_text: string, book_context: string) -> Story[] {\n  client AutoModel\n  prompt #\"\n    You are extracting structured stories from a chapter of a book about Apple Computer history.\n\n    Book context: {{ book_context }}\n\n    Chapter text:\n    ---\n    {{ chapter_text }}\n    ---\n\n    Instructions:\n    1. Extract 0 or more Story objects from this chapter\n    2. Focus on SPECIFIC, CONCRETE stories rather than general summaries:\n       - Extract stories about particular incidents, events, decisions, or actions\n       - Look for grounding details: named people, specific numbers, locations, dates, quotes\n       - A story should have narrative specificity, not just list facts or trends\n\n       ❌ Skip only:\n          - Pure background or context paragraphs without a specific event\n          - Multi-year trend summaries without concrete incidents\n          - Abstract lists of challenges or factors\n\n       ✅ Good story markers (include a good strong marker or if story has a few):\n          - Named individuals taking action or making decisions (especially main characters like Jobs, Cook, Wozniak, Sculley etc.)\n          - Specific amounts, dates, or quantities (e.g., \"50,000 units\", \"March 1984\")\n          - Identifiable places or facilities (e.g., \"Cupertino factory\", \"Bandley Drive\")\n          - Clear cause-and-effect or turning points\n          - Direct quotes or specific conflicts between people/companies\n          - Concrete products, prototypes, or technical decisions\n    3. Each story must be grounded in the chapter text - no external knowledge\n    4. Use \"auto_or_uuid\" for story_id to auto-generate\n    5. Include provenance when available\n    6. Assign confidence based on narrative detail and specificity (range: 0.5-0.8 is typical)\n    7. Extract only factual information, not speculation\n    8. For dates, capture the original text and attempt parsing\n    9. For locations - ALWAYS extract place names mentioned in text:\n       - place_name: REQUIRED - extract the location name\n       - lat/lon: OPTIONAL - provide coordinates when possible:\n         * If text has exact coordinates → use them, set geo_precision: \"exact\"\n         * For well-known places (major cities, famous buildings, company headquarters) → provide approximate coordinates from your knowledge\n         * Set geo_precision appropriately: \"approximate-building\" (for specific buildings), \"approximate-city\" (for cities), \"approximate-region\" (for regions/states)\n         * For unknown/ambiguous places → leave lat/lon null\n       - note: Include contextual details from the text to help with future geocoding:\n         * When mentioned: year/date, specific function, named entities, size/ownership, story context\n         * Preserve the location's original context from the chapter text\n       - place_type: factory, headquarters, city, campus, office, lab, etc. (when evident)\n    10. For people, extract names and roles when mentioned\n    11. For companies, extract names and their relationship to the story\n    12. For products, extract product names and details\n    13. Extract themes, event_type, and tone when evident from the narrative\n    14. When in doubt, prefer inclusion if the story has concrete grounding details\n\n    Return a JSON array of Story objects matching the schema.\n  \"#\n}\n",
}

def get_baml_files():
    return _file_map