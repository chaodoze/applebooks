# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "geocode.baml": "// BAML functions for precision geocoding\n// Used by abxgeo to resolve vague locations to precise addresses\n\nclass SearchQuery {\n  query string @description(\"Web search query optimized for finding precise address information\")\n  intent string @description(\"What we're trying to find: 'building_address', 'factory_location', 'residence', 'landmark'\")\n  constraints string[] @description(\"Important constraints to include in search (e.g., time period, company name, specific details)\")\n}\n\nclass AddressCandidate {\n  address string @description(\"Full street address if found, otherwise most specific location found\")\n  lat float? @description(\"Latitude coordinate\")\n  lon float? @description(\"Longitude coordinate\")\n  precision string @description(\"One of: 'address', 'street', 'intersection', 'city', 'region', 'country'\")\n  source_url string @description(\"URL where this information was found\")\n  source_snippet string @description(\"Exact text snippet from source that contains the address/location info\")\n  confidence float @description(\"Confidence score 0.0-1.0 based on source reliability and specificity\")\n  is_residence bool @description(\"True if this is a private residence\")\n  reasoning string @description(\"Brief explanation of why this candidate was extracted and confidence score\")\n}\n\nclass ScoredCandidate {\n  candidate AddressCandidate\n  final_score float @description(\"Final confidence score 0.0-1.0 after cross-validation\")\n  corroboration string[] @description(\"List of corroborating evidence from other sources\")\n  concerns string[] @description(\"Any red flags or uncertainty factors\")\n}\n\nfunction GenerateSearchQuery(\n  place_name: string,\n  place_type: string?,\n  note: string?,\n  story_title: string,\n  story_summary: string\n) -> SearchQuery {\n  client GeocodeModel\n  prompt #\"\n    You are a geocoding expert tasked with creating web search queries to find precise addresses.\n\n    LOCATION TO FIND:\n    Place Name: {{ place_name }}\n    Place Type: {{ place_type or \"unknown\" }}\n    Context Note: {{ note or \"none\" }}\n\n    STORY CONTEXT:\n    Title: {{ story_title }}\n    Summary: {{ story_summary }}\n\n    TASK:\n    Generate an optimized web search query to find the precise street address or coordinates.\n\n    GUIDELINES:\n    1. Include specific details from the context (company names, time periods, events)\n    2. Add keywords like \"address\", \"location\", \"coordinates\", \"building\" as appropriate\n    3. For factories: include company name + factory + city\n    4. For residences: be respectful of privacy, focus on historical/public records\n    5. For headquarters: include company name + headquarters + city + year if available\n    6. Determine intent: building_address, factory_location, residence, or landmark\n    7. List important constraints to narrow the search (e.g., \"Apple factory 1980s\", \"Tesla electronics\")\n\n    EXAMPLES:\n    - \"Apple factory Fountain Colorado 1980s address\"\n    - \"One Infinite Loop Cupertino California coordinates\"\n    - \"Macintosh factory Fremont California 1984 building address\"\n\n    Return a JSON object with the SearchQuery structure:\n    {\n      \"query\": \"your search query here\",\n      \"intent\": \"building_address|factory_location|residence|landmark\",\n      \"constraints\": [\"constraint1\", \"constraint2\", ...]\n    }\n  \"#\n}\n\nfunction ExtractAddressCandidates(\n  search_results: string,\n  place_name: string,\n  story_context: string\n) -> AddressCandidate[] {\n  client GeocodeModel\n  prompt #\"\n    You are a geocoding expert extracting precise address information from web search results.\n\n    SEARCH RESULTS:\n    {{ search_results }}\n\n    TARGET LOCATION: {{ place_name }}\n    STORY CONTEXT: {{ story_context }}\n\n    TASK:\n    Extract all address candidates from the search results. Return multiple candidates if different sources give different addresses.\n\n    EXTRACTION RULES:\n    1. Look for complete street addresses (number, street, city, state, zip)\n    2. If no street address, look for coordinates (lat/lon)\n    3. If no coordinates, extract the most specific location mentioned\n    4. Determine precision level: address > street > intersection > city > region > country\n    5. Extract exact source URL and text snippet containing the address\n    6. Assign confidence based on:\n       - Source reliability: .gov/.edu (0.9-1.0), Wikipedia (0.7-0.8), news (0.6-0.8), forums (0.3-0.5)\n       - Specificity: exact address (1.0), intersection (0.7), city only (0.3)\n       - Corroboration: multiple sources increase confidence\n    7. Flag if location is a private residence (is_residence = true)\n    8. Provide reasoning for confidence score\n\n    EXAMPLES:\n    ✓ \"702 Bandley Drive, Fountain, Colorado 80817\" → precision: address, confidence: 0.95\n    ✓ \"Corner of Bandley Dr and Main St\" → precision: intersection, confidence: 0.7\n    ✓ \"Somewhere in Fountain, Colorado\" → precision: city, confidence: 0.3\n    ✗ \"Colorado\" → precision: region, confidence: 0.1 (too vague)\n\n    Return a JSON array of AddressCandidate objects, sorted by confidence (highest first).\n    Each candidate should have this structure:\n    {\n      \"address\": \"full street address\",\n      \"lat\": 37.123 or null,\n      \"lon\": -122.456 or null,\n      \"precision\": \"address|street|intersection|city|region|country\",\n      \"source_url\": \"http://...\",\n      \"source_snippet\": \"exact text from source\",\n      \"confidence\": 0.85,\n      \"is_residence\": false,\n      \"reasoning\": \"why this candidate and confidence score\"\n    }\n  \"#\n}\n\nfunction ScoreAndValidate(\n  candidates: AddressCandidate[],\n  place_name: string,\n  original_coords: string?\n) -> ScoredCandidate {\n  client GeocodeModel\n  prompt #\"\n    You are a geocoding expert performing final validation and scoring.\n\n    CANDIDATES FOUND:\n    {% for candidate in candidates %}\n    {{ loop.index }}. {{ candidate.address }} ({{ candidate.precision }}, confidence: {{ candidate.confidence }})\n       Source: {{ candidate.source_url }}\n       Snippet: {{ candidate.source_snippet }}\n       Reasoning: {{ candidate.reasoning }}\n    {% endfor %}\n\n    ORIGINAL LOCATION: {{ place_name }}\n    ORIGINAL COORDS: {{ original_coords or \"none\" }}\n\n    TASK:\n    Select the best candidate and assign a final confidence score.\n\n    VALIDATION CRITERIA:\n    1. Cross-check coordinates if original coords were provided (should be nearby)\n    2. Look for corroboration across multiple candidates\n    3. Prefer more specific locations (address > intersection > city)\n    4. Trust higher-quality sources (.gov/.edu > Wikipedia > news > forums)\n    5. Flag concerns:\n       - Conflicting information across sources\n       - Very old sources for current locations\n       - Vague or ambiguous addresses\n       - Private residences (lower confidence if not public record)\n\n    FINAL SCORE CALCULATION:\n    - Start with candidate's base confidence\n    - Add +0.1 if corroborated by 2+ sources\n    - Add +0.05 if original coords match (within ~1km)\n    - Subtract -0.2 if major concerns exist\n    - Clamp to 0.0-1.0 range\n\n    Return a JSON object with the ScoredCandidate structure:\n    {\n      \"candidate\": { ... best AddressCandidate ... },\n      \"final_score\": 0.87,\n      \"corroboration\": [\"evidence 1\", \"evidence 2\"],\n      \"concerns\": [\"concern 1\", \"concern 2\"]\n    }\n  \"#\n}\n\n// GeocodeModel client for geocoding (uses gpt-5 with web search)\nclient<llm> GeocodeModel {\n  provider openai-responses\n  options {\n    model \"gpt-5\"\n    reasoning {\n      effort \"medium\"\n    }\n    tools [\n      {\n        type \"web_search_preview\"\n      }\n    ]\n  }\n}\n",
    "main.baml": "// BAML configuration for story extraction\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o-2024-08-06\"\n    api_key env.OPENAI_API_KEY\n    temperature 0\n  }\n}\n\nclient<llm> GPT4oMini {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n    temperature 0\n  }\n}\n\n// Auto-resolve to best available model (GPT-5)\nclient<llm> AutoModel {\n  provider openai\n  options {\n    model \"gpt-5\"\n    api_key env.OPENAI_API_KEY\n    reasoning_effort \"medium\"\n  }\n}\n\nclass DateInfo {\n  asserted_text string? @description(\"Original date text from chapter\")\n  parsed string? @description(\"Parsed date in EDTF-ish format, e.g., '1984-03~'\")\n  precision string? @description(\"Precision: year, month, day, quarter, decade\")\n}\n\nclass Location {\n  place_name string @description(\"Name of the place\")\n  lat float? @description(\"Latitude\")\n  lon float? @description(\"Longitude\")\n  place_type string? @description(\"Type of place: office, lab, factory, etc.\")\n  geo_precision string? @description(\"building, campus, city, region\")\n  visitability string? @description(\"public, private, historical\")\n  note string? @description(\"Additional context\")\n}\n\nclass Person {\n  name string @description(\"Person's name\")\n  role_at_time string? @description(\"Role at the time of the story\")\n  team string? @description(\"Team or department\")\n  affiliation string? @description(\"Company or organization\")\n}\n\nclass Product {\n  product_line string? @description(\"Product line\")\n  model string? @description(\"Model name or number\")\n  codename string? @description(\"Internal codename\")\n  generation string? @description(\"Generation or version\")\n  design_language string? @description(\"Design language or style\")\n}\n\nclass Company {\n  name string @description(\"Company name\")\n  relationship string? @description(\"Relationship to the story: beneficiary, competitor, partner, etc.\")\n}\n\nclass Provenance {\n  source_type string @description(\"Type of source: book, interview, memo, etc.\")\n  citation string? @description(\"Citation text\")\n  isbn string? @description(\"ISBN if book source\")\n  author string? @description(\"Author of source\")\n  pub_year int? @description(\"Publication year\")\n  quote_snippet string? @description(\"Direct quote from source\")\n}\n\nclass Relationships {\n  contradicts string[]? @description(\"Story IDs this contradicts\")\n  references string[]? @description(\"Story IDs this references\")\n  precedes string[]? @description(\"Story IDs this precedes\")\n}\n\nclass Media {\n  asset_type string @description(\"Type: photo, video, document, etc.\")\n  uri string? @description(\"URI to the asset\")\n  credit string? @description(\"Credit/attribution\")\n  license string? @description(\"License type\")\n  date string? @description(\"Date of asset\")\n}\n\nclass Story {\n  story_id string @description(\"Use 'auto_or_uuid' to auto-generate\")\n  title string @description(\"Short descriptive title\")\n  summary string @description(\"2-3 sentence neutral summary\")\n  dates DateInfo? @description(\"Date information\")\n  locations Location[]? @description(\"Locations mentioned in the story\")\n  forward_locale Location? @description(\"Forward-looking location where impact occurred\")\n  people Person[]? @description(\"People involved\")\n  products Product[]? @description(\"Products mentioned\")\n  companies Company[]? @description(\"Companies involved\")\n  event_type string[]? @description(\"Event types: DesignDecision, Prototype, ProductLaunch, etc.\")\n  themes string[]? @description(\"Themes: innovation, conflict, partnership, etc.\")\n  tone string[]? @description(\"Tone: triumphant, tense, nostalgic, etc.\")\n  business_phase string? @description(\"Business phase or era\")\n  era string? @description(\"Era description\")\n  relationships Relationships? @description(\"Relationships to other stories\")\n  provenance Provenance[]? @description(\"Source citations\")\n  confidence float @description(\"Confidence score 0-1\")\n  freeform_tags string[]? @description(\"Freeform tags\")\n  media Media[]? @description(\"Media assets\")\n}\n\nfunction ExtractStories(chapter_text: string, book_context: string) -> Story[] {\n  client AutoModel\n  prompt #\"\n    You are extracting structured stories from a chapter of a book about Apple Computer history.\n\n    Book context: {{ book_context }}\n\n    Chapter text:\n    ---\n    {{ chapter_text }}\n    ---\n\n    Instructions:\n    1. Extract 0 or more Story objects from this chapter\n    2. Focus on SPECIFIC, CONCRETE stories rather than general summaries:\n       - Extract stories about particular incidents, events, decisions, or actions\n       - Look for grounding details: named people, specific numbers, locations, dates, quotes\n       - A story should have narrative specificity, not just list facts or trends\n\n       ❌ Skip only:\n          - Pure background or context paragraphs without a specific event\n          - Multi-year trend summaries without concrete incidents\n          - Abstract lists of challenges or factors\n\n       ✅ Good story markers (include a good strong marker or if story has a few):\n          - Named individuals taking action or making decisions (especially main characters like Jobs, Cook, Wozniak, Sculley etc.)\n          - Specific amounts, dates, or quantities (e.g., \"50,000 units\", \"March 1984\")\n          - Identifiable places or facilities (e.g., \"Cupertino factory\", \"Bandley Drive\")\n          - Clear cause-and-effect or turning points\n          - Direct quotes or specific conflicts between people/companies\n          - Concrete products, prototypes, or technical decisions\n    3. Each story must be grounded in the chapter text - no external knowledge\n    4. Use \"auto_or_uuid\" for story_id to auto-generate\n    5. Include provenance when available\n    6. Assign confidence based on narrative detail and specificity (range: 0.5-0.8 is typical)\n    7. Extract only factual information, not speculation\n    8. For dates, capture the original text and attempt parsing\n    9. For locations - ALWAYS extract place names mentioned in text:\n       - place_name: REQUIRED - extract the location name\n       - lat/lon: OPTIONAL - provide coordinates when possible:\n         * If text has exact coordinates → use them, set geo_precision: \"exact\"\n         * For well-known places (major cities, famous buildings, company headquarters) → provide approximate coordinates from your knowledge\n         * Set geo_precision appropriately: \"approximate-building\" (for specific buildings), \"approximate-city\" (for cities), \"approximate-region\" (for regions/states)\n         * For unknown/ambiguous places → leave lat/lon null\n       - note: Include contextual details from the text to help with future geocoding:\n         * When mentioned: year/date, specific function, named entities, size/ownership, story context\n         * Preserve the location's original context from the chapter text\n       - place_type: factory, headquarters, city, campus, office, lab, etc. (when evident)\n    10. For people, extract names and roles when mentioned\n    11. For companies, extract names and their relationship to the story\n    12. For products, extract product names and details\n    13. Extract themes, event_type, and tone when evident from the narrative\n    14. When in doubt, prefer inclusion if the story has concrete grounding details\n\n    Return a JSON array of Story objects matching the schema.\n  \"#\n}\n",
}

def get_baml_files():
    return _file_map