# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (12)
# #########################################################################

class AddressCandidate(BaseModel):
    address: str
    lat: typing.Optional[float] = None
    lon: typing.Optional[float] = None
    precision: str
    source_url: str
    source_snippet: str
    confidence: float
    is_residence: bool
    reasoning: str

class Company(BaseModel):
    name: str
    relationship: typing.Optional[str] = None

class DateInfo(BaseModel):
    asserted_text: typing.Optional[str] = None
    parsed: typing.Optional[str] = None
    precision: typing.Optional[str] = None

class Location(BaseModel):
    place_name: str
    lat: typing.Optional[float] = None
    lon: typing.Optional[float] = None
    place_type: typing.Optional[str] = None
    geo_precision: typing.Optional[str] = None
    visitability: typing.Optional[str] = None
    note: typing.Optional[str] = None

class Media(BaseModel):
    asset_type: str
    uri: typing.Optional[str] = None
    credit: typing.Optional[str] = None
    license: typing.Optional[str] = None
    date: typing.Optional[str] = None

class Person(BaseModel):
    name: str
    role_at_time: typing.Optional[str] = None
    team: typing.Optional[str] = None
    affiliation: typing.Optional[str] = None

class Product(BaseModel):
    product_line: typing.Optional[str] = None
    model: typing.Optional[str] = None
    codename: typing.Optional[str] = None
    generation: typing.Optional[str] = None
    design_language: typing.Optional[str] = None

class Provenance(BaseModel):
    source_type: str
    citation: typing.Optional[str] = None
    isbn: typing.Optional[str] = None
    author: typing.Optional[str] = None
    pub_year: typing.Optional[int] = None
    quote_snippet: typing.Optional[str] = None

class Relationships(BaseModel):
    contradicts: typing.Optional[typing.List[str]] = None
    references: typing.Optional[typing.List[str]] = None
    precedes: typing.Optional[typing.List[str]] = None

class ScoredCandidate(BaseModel):
    candidate: "AddressCandidate"
    final_score: float
    corroboration: typing.List[str]
    concerns: typing.List[str]

class SearchQuery(BaseModel):
    query: str
    intent: str
    constraints: typing.List[str]

class Story(BaseModel):
    story_id: str
    title: str
    summary: str
    dates: typing.Optional["DateInfo"] = None
    locations: typing.Optional[typing.List["Location"]] = None
    forward_locale: typing.Optional["Location"] = None
    people: typing.Optional[typing.List["Person"]] = None
    products: typing.Optional[typing.List["Product"]] = None
    companies: typing.Optional[typing.List["Company"]] = None
    event_type: typing.Optional[typing.List[str]] = None
    themes: typing.Optional[typing.List[str]] = None
    tone: typing.Optional[typing.List[str]] = None
    business_phase: typing.Optional[str] = None
    era: typing.Optional[str] = None
    relationships: typing.Optional["Relationships"] = None
    provenance: typing.Optional[typing.List["Provenance"]] = None
    confidence: float
    freeform_tags: typing.Optional[typing.List[str]] = None
    media: typing.Optional[typing.List["Media"]] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
